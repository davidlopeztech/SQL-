# For this project, I downloaded Spotify data from Kaggle.
#After that, I created a table to insert Spotify data into.
#Finally, I peformed analytics on the data by using SQL.

#CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

#Then, I inserted Spotify Data csv. into the table. 

#After inserting the data into the table, I explored the data by answering the following questions/prompts. 

#1. Who are the top 10 artist based on popularity?
SELECT DISTINCT artist_name, popularity
FROM BIT_DB.SpotifyData
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

#2. What artist released the shortest song?
SELECT artist_name
,track_name
,MIN(duration_ms)
FROM spotifydata

#3. What's the average danceability for the 10 most popular songs?
SELECT AVG(danceability)
FROM spotifydata
WHERE track_name
IN (SELECT track_name
FROM spotifydata
ORDER BY popularity 
LIMIT 10); 

#4. Write a CASE statement based on song popularity rankings.
SELECT track_name
,popularity,
CASE WHEN popularity >= 90 THEN "most known" 
WHEN popularity >= 80 THEN "known"
WHEN popularity >= 70 THEN "respectable" 
ELSE "promising"
END AS "song popularity rankings"
FROM spotifydata
ORDER BY popularity desc; 
